对象类型和原始类型的不同之处？函数参数是对象会发生什么问题？
1>在 JS 中，除了原始类型那么其他的都是对象类型了。
2>对象类型和原始类型不同的是，原始类型存储的是值，对象类型存储的是地址（指针）。
3>当你创建了一个对象类型的时候，计算机会在内存中帮我们开辟一个空间来存放值，但是我们需要找到这个空间，这个空间会拥有一个地址（指针）。
如：
const a = []
4>对于常量 a 来说，假设内存地址（指针）为 #001，那么在地址 #001 的位置存放了值 []，常量 a 存放了地址（指针） #001，再看以下代
const a = []
const b = a
b.push(1)
5>当我们将变量赋值给另外一个变量时，复制的是原本变量的地址（指针），也就是说当前变量 b 存放的地址（指针）也是 #001，当我们进行数据修改的时候，就会修改存放在地址（指针） #001 上的值，也就导致了两个变量的值都发生了改变。
6>接下来我们来看函数参数是对象的情况
function test(person) {
  person.age = 26
  person = {
    name: 'yyy',
    age: 30
  }

  return person
}
const p1 = {
  name: 'yck',
  age: 25
}
const p2 = test(p1)
console.log(p1) // -> ?
console.log(p2) // -> ?
7>解析：
a.首先，函数传参是传递对象指针的副本
b.到函数内部修改参数的属性这步，我相信大家都知道，当前 p1 的值也被修改了
c.但是当我们重新为 person 分配了一个对象时就出现了分歧，请看下图

8>所以最后 person 拥有了一个新的地址（指针），也就和 p1 没有任何关系了，导致了最终两个变量的值是不相同的。
