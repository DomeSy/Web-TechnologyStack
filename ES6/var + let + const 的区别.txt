什么是提升？什么是暂时性死区？var、let 及 const 区别？
1>提升(hoisting)：虽然变量还没有被声明，但是我们却可以使用这个未被声明的变量，这种情况就叫做提升，并且提升的是声明。
a.声明的提升：
列1：
console.log(a);  // undefined
var a = 1;
上述代码等价于：
var a;
console.log(a);  // undefined
a = 1;
列2：
var a = 10
var a
console.log(a):
答案应该是 10，这里的值并非undefined，而是10，上述代码等价于：
var a
var a
a = 10
console.log(a)
b.函数的提升：
console.log(a) // ? a() {}
function a() {}
var a = 1
打印结果会是 ? a() {}，即使变量声明在函数之后，这也说明了函数会被提升，并且优先于变量提升。
c.JavaScript的变量提升是针对var的，而let和const不存在变量提升这一特性
2>let 、const：暂时性死区
列：
var a = 1
let b = 1
const c = 1
console.log(window.b) // undefined
console.log(window. c) // undefined

function test(){
  console.log(a)
  let a
}
test()
var a = 1
let b = 1
const c = 1
console.log(window.b) // undefined
console.log(window. c) // undefined

function test(){
  console.log(a)
  let a
}
注：a.test()首先在全局作用域下使用 let 和 const 声明变量，变量并不会被挂载到 window 上，这一点就和 var 声明有了区别。
b.再者当我们在声明 a 之前如果使用了 a，就会出现报错的情况


             c.首先报错的原因是因为存在暂时性死区，我们不能在声明前就使用变量，这也是 let 和 const 优于 var 的一点。
d.然后这里你认为的提升和 var 的提升是有区别的，虽然变量在编译的环节中被告知在这块作用域中可以访问，但是访问是受限制的。
3>为什么会存在提升，根本原因就是为了解决函数间互相调用的情况
如：
function test1() {
    test2()
}
function test2() {
    test1()
}
test1()
假如不存在提升这个情况，那么就实现不了上述的代码，因为不可能存在 test1 在 test2 前面然后 test2 又在 test1 前面。
4>
a.函数提升优先于变量提升，函数提升会把整个函数挪到作用域顶部，变量提升只会把声明挪到作用域顶部
b.var 存在提升，我们能在声明之前使用。let、const 因为暂时性死区的原因，不能在声明前使用
c.var 在全局作用域下声明变量会导致变量挂载在 window 上，其他两者不会
let 和 const 作用基本一致，但是后者声明的变量不能再次赋值
