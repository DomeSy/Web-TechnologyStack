Git设置：
1>设置邮箱：
git config --global user.email "397163123@qq.com"(邮箱)
2>设置用户名：
git config --global user.name "Domesy"
3>查看状态：
git config --global -l

Git基础命令：
1>git init：初始化创建一个仓库
    注：会创建出一个隐藏的.git 文件夹，所有的操作历史将存入这里
2>git status：查看当前仓库所在目录的文件状态
modified：已修改                           Untracked：未追踪的
3>git add 文件名：使文件加入追踪状态
    git add .  ：添加所有的文件加入追踪状态
4>git commit 提交（进入vim模式）
5>git commit -m “文件描述”  ：合并，不用进入vim模式
    git commit -a -m "文件描述"：合并加入追踪模式
    注：但必须注意该文件必须县加入追踪状态，否则不能用
6>git log：查看提交记录
7>git config --global corequotepath false：文件名乱码

删除文件：
1>命令行删除：
git rm 文件名：删除git区域中记录的文件，并且不能保留在工作目录中
git rm -f(force) 文件名：强制删除（后续不会找回，尽量不用）
2>手动删除（鼠标删除）工作目录中的文件（注：不能删除git目录下的文件）
3>删除Git仓库中的保留工作目录中的文件
git rm --cache 文件名
注：通过git commit 提交后，在后续的操作中可以找回删除的文件，但如果不通过，则不能找回

移动文件：
作用：1>重命名：git mv a.txt first/a.txt
           2>移动文件：git mv fie_from fie_to
注：实际上移动文件是把所有文件删除再重新新建一个相同的文件
以上命令相当于以下三条：1> mv file_from file_to
       2>git rm file_from
3>git add file_to

master分支：
1>创建分支：git branch 分支名称
    注：创建出来的分支，并不会改变我们当前所在的位置
2>切换分支：git checkout 分支名
     注：将HEAD指向切换的分支
将工作目录恢复成当前分支的快照
3>上述两种情况简写为：git checkout -b 分支名称
4>git branch：所处的分支
注：a.git log 只会显示分支上的操作，并且在文件夹上只会显示分支的文件内容也会根据分支的不同而不同。
       b.HEAD是一个特殊的指针，该指针指向当前所在的文件（HEAD是唯一的）

查看命令：
1>git log --oneline(简化信息，校验盒，哈希） --decorate（分支的信息）：查看分支指向+哈希
2>git log --oneline --decorate --all（所有）--graph(树型状）：查看命令的完美组合，所有分支的提交，以树形图显示。

合并分支：
1>git merge 目标分支：将目标分支的内容合并到当前分支
2>git merge --no-ff -m ‘描述内容’ 目标分支 （可以commit记录描述，为合并操作）

分支冲突：
如何判断是否会引起冲突：
1>master和branch1处于同一条commit路径上（直接级，祖先关系）
2>master和breach直接合并，不会引起冲突
注：a.分析master和branch1中的修改内容是否一直，如果一致合并将会成为一次空合并（因为内容一致，没有必要合并的需要）
       b.如果不一致，是否修改的同一个文件内容，如果是产生冲突
解决分支冲突：
1>手动解决冲突部分
2>解决完成后再次提交，会以这次提交的内容为准

删除分支：
1>git branch -d 分支名称
    注：a.如果你的分支从未合并：git branch -D 分支名称。合并完成后，分之就没有任何的后期用途了，这时候我们需要手动删除分支，以防止自己词穷的时候出现重复命名分支的情况。
     b.*HEAD所指的分支无法删除
2>git merge --abort：取消合并（只能解决发生冲突时的撤销）

撤销大集合：
1>撤销上一次提交信息：
git commit -m '内容' --amend:修改上一次提交的内容
git commit --amend：a.修改提交信息
   b.修正紧挨着的一次的提交与本次提交合并
2>取消暂存：git reset HEAD 文件名
3>git checkout --<file>：撤销对文件的修改（还未加入暂存的文件） 
    注：checkout的本质是 签出指定commit，只会改变HEAD指向并不会影响分支指向。

Reset撤销：
1>git reset "HEAD^"：撤销在HEAD之后的提交
    注：a.有几个^就代表撤销多少步
     b.加上双引号的原因：是因为windows中的^代表换行
2>git reset HEAD~n:撤销到前n步的git提交
3>git reset 哈希值：撤销到当前的步骤
    注：哈希值可以通过查看历史记录来查询
4>git reflog：查看历史提交记录
5>git reset "HEAD^"  --hard （尽量避免使用）
     重置工作目录，丢失暂存：（返回所有的上次操作，包括修改前）
6>git reset "HEAD^" --sort
    保留工作目录，与原分支差异将放到暂存区（返回提交前）
7>git reset "HEAD^" --mixed（默认）
     保留工作目录，并且清空暂存区

存储：
当在一个分支中向暂存区添加内容，切换到另一个分支时，提交commit会带上另一分支中的暂存内容。
1>git stash：存储暂时区及工作目录修改文件
2>git stash -u：在上面的基础上带上未追踪文件
3>git stash list：打印所有存储内容
4>git stash apply <stashName>：将存储内容重新应用（默认不保留已暂存内容）
5>git stash apply --index：将原暂存依旧以暂存进行取出
6>git stash drop：移除存储
注：当存在多个时加上标号（标号：git stash list 打印出来，如stash@{0})

rebase变基：
和merge同样都是进行合并操作的。将一个分支的内容都移至到一个分支上。
工作流程：
1>首先找到两个分支的共同祖先
2>然后对比当前与祖先的历史提交，进行提取相应修改，并保存为临时文件，将当前分支指向目标基底最后将之前存为临时文件的修改一次应用。

别名：当单词过多常用时，可设置别名
1>git config --global(全局) alias.co checkout 
2>git config --local(当地) alias.co checkout
注：a.co相当于checkout，直接使用co即可
 b.不是所有的命令符都能取别名

