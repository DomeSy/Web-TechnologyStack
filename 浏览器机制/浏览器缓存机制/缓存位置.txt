缓存位置
从缓存位置上来说分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络
1>Service Worker
2>Memory Cache
3>Disk Cache
4>Push Cache
5>网络请求

Service Worker
1>Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。
2>当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。			
3>也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。
4>但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。

Memory Cache
1>Memory Cache 也就是内存中的缓存，读取内存中的数据肯定比磁盘快。
2>但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。
3>当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存

4>那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？
a.先说结论，这是不可能的。首先计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。
b.内存中其实可以存储大部分的文件，比如说 JSS、HTML、CSS、图片等等。			
c.但是浏览器会把哪些文件丢进内存这个过程就很玄学了，我查阅了很多资料都没有一个定论。
5>当然，我通过一些实践和猜测也得出了一些结论：
a.对于大文件来说，大概率是不存储在内存中的，反之优先
b.当前系统内存使用率高的话，文件优先存储进硬盘

Disk Cache
1>Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。
2>在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。
3>它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。
4>并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。

Push Cache
1>Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。
2>并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。
3>Push Cache 在国内能够查到的资料很少，也是因为 HTTP/2 在国内不够普及，但是 HTTP/2 将会是日后的一个趋势。
4>结论
a.所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好
b.可以推送 no-cache 和 no-store 的资源
c.一旦连接被关闭，Push Cache 就被释放
d.多个页面可以使用相同的 HTTP/2 连接，也就是说能使用同样的缓存
e.Push Cache 中的缓存只能被使用一次
f.浏览器可以拒绝接受已经存在的资源推送
g.你可以给其他域名推送资源

网络请求
1>如果所有缓存都没有命中的话，那么只能发起请求来获取资源了。
2>那么为了性能上的考虑，大部分的接口都应该选择好缓存策略，接下来我们就来学习缓存策略这部分的内容。