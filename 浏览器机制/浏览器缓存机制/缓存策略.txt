缓存策略
通常浏览器缓存策略分为两种：强缓存和协商缓存，并且缓存策略都是通过设置 HTTP Header 来实现的。

强缓存
1>强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control 。强缓存表示在缓存期间不需要请求，state code 为 200。
2>Expires
a.代码：Expires: Wed, 22 Oct 2018 08:41:00 GMT
b.Expires 是 HTTP/1 的产物，表示资源会在 Wed, 22 Oct 2018 08:41:00 GMT 后过期，需要再次请求。并且 Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效。
3>Cache-control
a.代码：Cache-control: max-age=30
b.Cache-Control 出现于 HTTP/1.1，优先级高于 Expires 。该属性值表示资源会在 30 秒后过期，需要再次请求。
c.Cache-Control 可以在请求头或者响应头中设置，并且可以组合使用多种指令

d.从图中我们可以看到，我们可以将多个指令配合起来一起使用，达到多个目的。
e.比如说我们希望资源能被缓存下来，并且是客户端和代理服务器都能缓存，还能设置缓存失效时间等等。
f.学习一些常见指令的作用

协商缓存
1>如果缓存过期了，就需要发起请求验证资源是否有更新。协商缓存可以通过设置两种 HTTP Header 实现：Last-Modified 和 ETag 。
2>当浏览器发起请求验证资源时，如果资源没有做改变，那么服务端就会返回 304 状态码，并且更新浏览器缓存有效期。 

3>Last-Modified 和 If-Modified-Since
a.Last-Modified 表示本地文件最后修改日期，
b.f-Modified-Since 会将 Last-Modified 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。
c.但是 Last-Modified 存在一些弊端：
1)如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源
2)因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源
d.因为以上这些弊端，所以在 HTTP / 1.1 出现了 ETag 。

4>ETag 和 If-None-Match
a.ETag 类似于文件指纹，If-None-Match 会将当前 ETag 发送给服务器，询问该资源 ETag 是否变动，有变动的话就将新的资源发送回来。
b.并且 ETag 优先级比 Last-Modified 高。
c.以上就是缓存策略的所有内容了，看到这里，不知道你是否存在这样一个疑问。
d.如果什么缓存策略都没设置，那么浏览器会怎么处理？
e.对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10% 作为缓存时间。