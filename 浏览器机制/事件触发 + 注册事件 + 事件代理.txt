
事件的触发过程是怎么样的？知道什么是事件代理嘛？
事件触发有三个阶段：
1>window 往事件触发处传播，遇到注册的捕获事件会触发
2>传播到事件触发处时触发注册的事件
3>从事件触发处往 window 传播，遇到注册的冒泡事件会触发

注：事件触发一般来说会按照上面的顺序进行，但是也有特例，如果给一个 body 中的子节点同时注册冒泡和捕获事件，事件触发会按照注册的顺序执行。

如：
// 以下会先打印冒泡然后是捕获
node.addEventListener(
  'click',
  event => {
    console.log('冒泡')
  },
  false
)
node.addEventListener(
  'click',
  event => {
    console.log('捕获 ')
  },
  true
)

注册事件
1>通常我们使用 addEventListener 注册事件，该函数的第三个参数可以是布尔值，也可以是对象。
2>对于布尔值 useCapture 参数来说，该参数默认值为 false ，useCapture 决定了注册的事件是捕获事件还是冒泡事件。
3>对于对象参数来说，可以使用以下几个属性
a.capture：布尔值，和 useCapture 作用一样
b.once：布尔值，值为 true 表示该回调只会调用一次，调用后会移除监听
c.passive：布尔值，表示永远不会调用 preventDefault
4>一般来说，如果我们只希望事件只触发在目标上，这时候可以使用 stopPropagation 来阻止事件的进一步传播。
5>通常我们认为 stopPropagation 是用来阻止事件冒泡的，其实该函数也可以阻止捕获事件。
6>stopImmediatePropagation 同样也能实现阻止事件，但是还能阻止该事件目标执行别的注册事件。
如：
node.addEventListener(
  'click',
  event => {
    event.stopImmediatePropagation()
    console.log('冒泡')
  },
  false
)
// 点击 node 只会执行上面的函数，该函数不会执行
node.addEventListener(
  'click',
  event => {
    console.log('捕获 ')
  },
  true
)

node.addEventListener(
  'click',
  event => {
    event.stopImmediatePropagation()
    console.log('冒泡')
  },
  false
)
// 点击 node 只会执行上面的函数，该函数不会执行
node.addEventListener(
  'click',
  event => {
    console.log('捕获 ')
  },
  true
)

事件代理
1>如果一个节点中的子节点是动态生成的，那么子节点需要注册事件的话应该注册在父节点上
如：
<ul id="ul">
	<li>1</li>
    <li>2</li>
	<li>3</li>
	<li>4</li>
	<li>5</li>
</ul>
<script>
	let ul = document.querySelector('#ul')
	ul.addEventListener('click', (event) => {
		console.log(event.target);
	})
</script>

2>事件代理的方式相较于直接给目标注册事件来说，有以下优点：
a.节省内存
b.不需要给子节点注销事件