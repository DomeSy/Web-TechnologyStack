浏览器渲染：
我们知道执行 JS 有一个 JS 引擎，那么执行渲染也有一个渲染引擎。同样，渲染引擎在不同的浏览器中也不是都相同的。
比如在 Firefox 中叫做 Gecko，在 Chrome 和 Safari 中都是基于 WebKit 开发的。

WebKit渲染引擎内容：
1.浏览器接收到 HTML 文件并转换为 DOM 树
1>当我们打开一个网页时，浏览器都会去请求对应的 HTML 文件。
2>虽然平时我们写代码时都会分为 JS、CSS、HTML 文件，也就是字符串，但是计算机硬件是不理解这些字符串的，所以在网络中传输的内容其实都是 0 和 1 这些字节数据。
3>当浏览器接收到这些字节数据以后，它会将这些字节数据转换为字符串，也就是我们写的代码。
字节数据 => 字符串
4>当数据转换为字符串以后，浏览器会先将这些字符串通过词法分析转换为标记（token），这一过程在词法分析中叫做标记化（tokenization）。
字节数据 => 字符串 => Token
5>那么什么是标记呢？这其实属于编译原理这一块的内容了。
a.简单来说，标记还是字符串，是构成代码的最小单位。
b.这一过程会将代码分拆成一块块，并给这些内容打上标记，便于理解这些最小单位的代码是什么意思。
如：

  c.当结束标记化后，这些标记会紧接着转换为 Node，最后这些 Node 会根据不同 Node 之前的联系构建为一颗 DOM 树。

d.以上就是浏览器从网络中接收到 HTML 文件然后一系列的转换过程。
最终结果为：

e.当然，在解析 HTML 文件的时候，浏览器还会遇到 CSS 和 JS 文件，这时候浏览器也会去下载并解析这些文件，接下来就让我们先来学习浏览器如何解析 CSS 文件。

2.将 CSS 文件转换为 CSSOM 树
1>CSS 到 CSSOM 树的过程和上面极其类似
2>为 字节数据 => 字符串 => Token => Node => CSSOM

3>在这一过程中，浏览器会确定下每一个节点的样式到底是什么，并且这一过程其实是很消耗资源的。
4>因为样式你可以自行设置给某个节点，也可以通过继承获得。在这一过程中，浏览器得递归 CSSOM 树，然后确定具体的元素到底是什么样式。
如：
<div>
  <a> <span></span> </a>
</div>
<style>
  // 第一种
  span {
    color: red;
  }
   // 第二种
  div > a > span {
    color: red;
  }
</style>
a.对于第一种设置样式的方式来说，浏览器只需要找到页面中所有的 span 标签然后设置颜色
b.但是对于第二种设置样式的方式来说，浏览器首先需要找到所有的 span 标签，然后找到 span 标签上的 a 标签，最后再去找到 div 标签，然后给符合这种条件的 span 标签设置颜色，这样的递归过程就很复杂。
c.所以我们应该尽可能的避免写过于具体的 CSS 选择器，然后对于 HTML 来说也尽量少的添加无意义标签，保证层级扁平。

3.生成渲染树
1>当我们生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树。

2>在这一过程中，不是简单的将两者合并就行了。
a.渲染树只会包括需要显示的节点和这些节点的样式信息，如果某个节点是 display: none 的，那么就不会在渲染树中显示。
b.当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流），然后调用 GPU 绘制，合成图层，显示在屏幕上。
c.对于这一部分的内容因为过于底层，还涉及到了硬件相关的知识。
d.那么通过以上内容，我们已经详细了解到了浏览器从接收文件到将内容渲染在屏幕上的这一过程。
