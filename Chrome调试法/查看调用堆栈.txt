查看调用堆栈
1查看调用堆栈是开发者工具提供的最有用的工具之一：
不仅可以在调用它们的函数中来回跳转，还可以在每个步骤检查它们的作用域。
2假设我们有一个简单页面和一个输入数字的脚本，并在页面上呈现数字乘以10.我们将调用两个函数：
a.一个用来做乘法
b.一个用来将结果渲染到页面中。

c.如上图所示，只需单击 “Call Stack” 窗格中的函数名称，我们就可以浏览它们的作用域。
d.如果您仔细观察会发现，每次我们从一个函数调用跳到另一个函数调用时，作用域都会保留，我们可以在这里对每一步进行分析！
3Blackbox 脚本用于展平堆栈
a.Blackboxing 脚本将通过从堆栈中排除特定的脚本或某些匹配模式的脚本来过滤调用堆栈。
b.例如，如果我有99%的时间只调试 userland 中的代码感兴趣，我可以在 Blackbox 中添加一个模式，将 node_modules 文件夹下的所有脚本过滤掉。
c.要通过 Blackbox 过滤一个脚本，有两种方法：
1)右键单击 Sources 选项卡中的 JS 脚本，然后单击“Blackbox Script”
2)转到Chrome设置页面，然后转到 Blackboxing 并单击 Add Pattern… 并输入您想要加入 Blackbox 的正则，在您想要过滤大量脚本时很有用。

4监视表达式
a.通过监视表达式，您可以定义一些 Javascript 语句，在开发者工具运行显示这些语句的结果。
b.这是一个特别有趣的工具，因为您可以写任何您想要的虚拟情况，只要它是一个有效的Javascript表达式。
c例如，您可以编写一个结果始终为 true 的表达式，当表达式结果为 false 时 ，您就可以发现当前的运行状态存在问题。
d.有一个需要注意问题：
1)当我们使用断点进行调试时，监视表达式将被立刻执行，不需要刷新页面
2)如果代码在正常运行时，则需要手动单击刷新按钮

