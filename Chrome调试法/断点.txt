断点
1>设置断点通常是调试过程的第一步。
虽然目前大多数浏览器中的内置开发工具，都允许您调试正在浏览的页面，停止在特定代码行上或者在特定语句上执行代码，但在本文中，我们将主要讲解 Chrome 开发者工具。
2>定义：
a.通常，可能希望停止执行代码，以便可以逐行地查看特定的上下文。
b.一旦代码在断点处停止，我们就可以通过访问作用域，查看调用堆栈，甚至在运行时更改代码来进行调试。
3>如何设置断点？
a.由于使用哪种前端技术对调试来说并不重要，为了更方便地向您解释断点，我将调试用于培训的一个 Angular 项目。
1)首先，打开开发工具并转到 Sources 选项卡
2)然后，打开我们要调试的文件
3)打开文件后，我们可以通过单击需要停止的那行代码来设置断点
b.在 Mac 上，使用快捷键 ⌘ + O 可以打开文件选择器，可以在其中找到您需要调试的文件。
c.在 Windows 上，可以使用 CTRL + O

c.设置断点如上图所示，我们可以在一行代码上更深入地设置断点，例如在一行代码里的不同语句。我们设置了3个断点：
1)第一个断点在代码定义时停止执行
2)第二个断点将在 priceReceived 函数执行之前停止
3)第三个断点将在 priceReceived 被调用后立即停止，因此我们也可以检查箭头函数的返回值
d.当调用箭头函数时，执行停止，右侧面板 Scope 将显示当前的上下文，并允许我们访问所有我们想查看的值。如下图所示，我们可以看到变量 price 的值 。

e.在下图中，一旦 priceReceived 执行，第三个断点就会被使用。	
在右侧面板中您可以使用 Return value 查看匿名函数的返回值。

4>临时取消断点
a.场景：在代码中设置了一堆断点。
b.在调试时，多次刷新页面是很常见的操作。
c.当前正在调试的代码可能有各种断点，有时候甚至会达到几百个。这几百个断点可能会浪费您大量的时间。
d.在这种情况下，可以暂时暂停所有断点的执行，您可以通过切换下图中的图标来操作：

5>执行错误时停止
a.场景：当代码执行产生了错误，但不想设置断点，因为您不知道何时会抛出错误。
b.在代码中抛出错误，这样就可以查看代码出现了什么问题。

6>条件断点
a.顾名思义，条件断点就是仅在条件为真时触发的断点。
b.例如，在上面的示例中，用户可以在文本区域中输入非数值。由于 JS 的兼容性只会显示 NaN 而不是抛出错误。
c.场景：您的代码比上面的代码更复杂，并且无法确定何时出现 NaN 。
d.当然，您可以设置一个断点，但复现错误并不容易，可能最终花费半小时来执行代码。在这种情况下，您可以使用条件断点，并仅在出现 NaN 时停止执行代码。
e.如下图：

1)右键单击要添加断点的代码行
2)单击“ Add conditional breakpoint… ”
3)添加有效的JS表达式。当然，在调用表达式时，您可以引用参数 x 和 y
4)当表达式为真时，断点将被触发
7>单步执行代码
a.为了充分利用 Dev Tools，值得花一点时间学习开发工具如何帮助我们快速单步执行代码，而无需在每一行设置断点。
b.使用 Dev Tools 中的 navigator 可以顺序逐行执行代码。
c.我将在下面介绍 Step over next function call 与 Step 的不同。在调试异步代码时，点击 Step 按钮将按时间顺序移动到下一行。

8>跳过下一个函数调用
a.Step over next function call 按钮也会顺序执行代码，但不会进入函数调用。也就是说，函数调用将被跳过，除非您在函数中设置了断点，否则调试器将不会在该函数中停止。

b.如果您仔细观察上图，会发现 multiplyBy 和 renderToDOM 这两个方法执行时没有像 Step 那样进入函数内部。
9>进入下一个函数调用
a.自 Chrome 68 以来，Step Into Next function call 按钮的作用发生了改变。它类似于上面提到的 Step 。
b.不同之处在于，当进入异步代码时，它将停止在异步代码中，而不是按时间顺序运行的代码

c.如上图所示：如果按时间顺序，第32行应该已经运行，但事实并非如此。调试器在等待2秒后才移动到第29行
e.退出函数调用
f.假设调试代码时，您不想进入某个函数的内部，Step Out of function call 允许您退出函数并在函数调用后的下一行停止。

g.上图中发生了什么？
1)代码在第36行的断点停了下来
2)然后跳出了函数 renderToDOM
3)调试器直接移到第29行并跳过 renderToDOM 函数的剩余部分
10>全局变量和即时输出
a.有时，在全局范围内存储某些值（例如组件类，大型数组或复杂对象）会非常有用。
b.例如，当您想要传入不同的参数调到某个组件的方法时，在调试过程中将这些参数添加到全局范围可以节省大量时间。

c.在上图中，我将数组 [previous, current] 存为全局变量。开发者工具会自动分配一个名为 temp{n} 的变量，n 基于先前保存的变量的数目。
d.如上图所示，变量被命名temp2，您可以在控制台中使用它，因为它现在已是一个全局变量了！
e.即时输出是 Chrome 68 中发布的一项功能，开发工具允许您在输入代码时在控制台中显示执行的结果。
f.如果您仔细观察上图会发现，当我将保存的变量映射到字符串数组时，我没有按下 Enter 键，但结果立即显示在下一行。